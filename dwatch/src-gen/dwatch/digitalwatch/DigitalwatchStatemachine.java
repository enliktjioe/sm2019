/** Generated by YAKINDU Statechart Tools code generator. */
package dwatch.digitalwatch;

import dwatch.ITimer;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DigitalwatchStatemachine implements IDigitalwatchStatemachine {
	protected class SCIButtonsImpl implements SCIButtons {
	
		private boolean topLeftPressed;
		
		
		public void raiseTopLeftPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				topLeftPressed = true;
				runCycle();
			}
		}
		
		private boolean topLeftReleased;
		
		
		public void raiseTopLeftReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				topLeftReleased = true;
				runCycle();
			}
		}
		
		private boolean topRightPressed;
		
		
		public void raiseTopRightPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				topRightPressed = true;
				runCycle();
			}
		}
		
		private boolean topRightReleased;
		
		
		public void raiseTopRightReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				topRightReleased = true;
				runCycle();
			}
		}
		
		private boolean botLeftPressed;
		
		
		public void raiseBotLeftPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				botLeftPressed = true;
				runCycle();
			}
		}
		
		private boolean botLeftReleased;
		
		
		public void raiseBotLeftReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				botLeftReleased = true;
				runCycle();
			}
		}
		
		private boolean botRightPressed;
		
		
		public void raiseBotRightPressed() {
			synchronized(DigitalwatchStatemachine.this) {
				botRightPressed = true;
				runCycle();
			}
		}
		
		private boolean botRightReleased;
		
		
		public void raiseBotRightReleased() {
			synchronized(DigitalwatchStatemachine.this) {
				botRightReleased = true;
				runCycle();
			}
		}
		
		protected void clearEvents() {
			topLeftPressed = false;
			topLeftReleased = false;
			topRightPressed = false;
			topRightReleased = false;
			botLeftPressed = false;
			botLeftReleased = false;
			botRightPressed = false;
			botRightReleased = false;
		}
	}
	
	
	protected class SCIDisplayImpl implements SCIDisplay {
	
		private SCIDisplayOperationCallback operationCallback;
		
		public synchronized void setSCIDisplayOperationCallback(
				SCIDisplayOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected class SCILogicUnitImpl implements SCILogicUnit {
	
		private SCILogicUnitOperationCallback operationCallback;
		
		public synchronized void setSCILogicUnitOperationCallback(
				SCILogicUnitOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected SCIButtonsImpl sCIButtons;
	
	protected SCIDisplayImpl sCIDisplay;
	
	protected SCILogicUnitImpl sCILogicUnit;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Running_Watch_Mode,
		main_region_Running_Watch_Mode_sub_region_Time_Display_Mode,
		main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode,
		main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle,
		main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused,
		main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running,
		main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset,
		main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode,
		main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main,
		main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection,
		main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[10];
	
	private boolean runChrono;
	
	protected boolean getRunChrono() {
		synchronized(DigitalwatchStatemachine.this) {
			return runChrono;
		}
	}
	
	protected void setRunChrono(boolean value) {
		synchronized(DigitalwatchStatemachine.this) {
			this.runChrono = value;
		}
	}
	
	
	private boolean topRightPressed;
	
	protected boolean getTopRightPressed() {
		synchronized(DigitalwatchStatemachine.this) {
			return topRightPressed;
		}
	}
	
	protected void setTopRightPressed(boolean value) {
		synchronized(DigitalwatchStatemachine.this) {
			this.topRightPressed = value;
		}
	}
	
	
	private long lightsOffCounter;
	
	protected long getLightsOffCounter() {
		synchronized(DigitalwatchStatemachine.this) {
			return lightsOffCounter;
		}
	}
	
	protected void setLightsOffCounter(long value) {
		synchronized(DigitalwatchStatemachine.this) {
			this.lightsOffCounter = value;
		}
	}
	
	
	private boolean fieldSelectedVisible;
	
	protected boolean getFieldSelectedVisible() {
		synchronized(DigitalwatchStatemachine.this) {
			return fieldSelectedVisible;
		}
	}
	
	protected void setFieldSelectedVisible(boolean value) {
		synchronized(DigitalwatchStatemachine.this) {
			this.fieldSelectedVisible = value;
		}
	}
	
	
	private long editTimeOver;
	
	protected long getEditTimeOver() {
		synchronized(DigitalwatchStatemachine.this) {
			return editTimeOver;
		}
	}
	
	protected void setEditTimeOver(long value) {
		synchronized(DigitalwatchStatemachine.this) {
			this.editTimeOver = value;
		}
	}
	
	
	private boolean editTime;
	
	protected boolean getEditTime() {
		synchronized(DigitalwatchStatemachine.this) {
			return editTime;
		}
	}
	
	protected void setEditTime(boolean value) {
		synchronized(DigitalwatchStatemachine.this) {
			this.editTime = value;
		}
	}
	
	
	public DigitalwatchStatemachine() {
		sCIButtons = new SCIButtonsImpl();
		sCIDisplay = new SCIDisplayImpl();
		sCILogicUnit = new SCILogicUnitImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCIDisplay.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIDisplay must be set.");
		}
		
		if (this.sCILogicUnit.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCILogicUnit must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		setRunChrono(false);
		
		setTopRightPressed(false);
		
		setLightsOffCounter(2000);
		
		setFieldSelectedVisible(false);
		
		setEditTimeOver(5000);
		
		setEditTime(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Running_Watch_Mode_sub_region_Time_Display_Mode:
				main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_react(true);
				break;
			case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle:
				main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle_react(true);
				break;
			case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused:
				main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused_react(true);
				break;
			case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running:
				main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running_react(true);
				break;
			case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset:
				main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset_react(true);
				break;
			case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main:
				main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main_react(true);
				break;
			case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection:
				main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection_react(true);
				break;
			case main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button:
				main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIButtons.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Running_Watch_Mode:
			return stateVector[0].ordinal() >= State.
					main_region_Running_Watch_Mode.ordinal()&& stateVector[0].ordinal() <= State.main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button.ordinal();
		case main_region_Running_Watch_Mode_sub_region_Time_Display_Mode:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Time_Display_Mode;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode:
			return stateVector[0].ordinal() >= State.
					main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode.ordinal()&& stateVector[0].ordinal() <= State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset.ordinal();
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset;
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode:
			return stateVector[0].ordinal() >= State.
					main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode.ordinal()&& stateVector[0].ordinal() <= State.main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection.ordinal();
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main;
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection;
		case main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button:
			return stateVector[0] == State.main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCIButtons getSCIButtons() {
		return sCIButtons;
	}
	
	public SCIDisplay getSCIDisplay() {
		return sCIDisplay;
	}
	
	public SCILogicUnit getSCILogicUnit() {
		return sCILogicUnit;
	}
	
	/* Entry action for state 'Running Watch Mode'. */
	private void entryAction_main_region_Running_Watch_Mode() {
		timer.setTimer(this, 0, (1 * 1000), true);
		
		timer.setTimer(this, 1, 1000, true);
	}
	
	/* Entry action for state 'Time Display Mode'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode() {
		timer.setTimer(this, 2, (1 * 1000), true);
		
		timer.setTimer(this, 3, 10, true);
		
		sCIDisplay.operationCallback.refreshTimeDisplay();
	}
	
	/* Entry action for state 'Chrono Display Mode'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode() {
		timer.setTimer(this, 4, 10, true);
		
		sCIDisplay.operationCallback.refreshChronoDisplay();
	}
	
	/* Entry action for state 'Paused'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused() {
		setRunChrono(false);
	}
	
	/* Entry action for state 'Running'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running() {
		setRunChrono(true);
	}
	
	/* Entry action for state 'Reset'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset() {
		sCILogicUnit.operationCallback.resetChrono();
		
		sCIDisplay.operationCallback.refreshChronoDisplay();
	}
	
	/* Entry action for state 'Time Edit Mode'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode() {
		timer.setTimer(this, 5, (1 * 1000), true);
		
		setEditTime(true);
		
		setEditTimeOver(5);
	}
	
	/* Entry action for state 'main'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main() {
		timer.setTimer(this, 6, 250, true);
		
		timer.setTimer(this, 7, 500, true);
		
		setFieldSelectedVisible(true);
	}
	
	/* Entry action for state 'increaseSelection'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection() {
		timer.setTimer(this, 8, 250, true);
		
		setFieldSelectedVisible(true);
		
		sCILogicUnit.operationCallback.increasePos(1);
	}
	
	/* Entry action for state 'Pressing botRight Button'. */
	private void entryAction_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button() {
		timer.setTimer(this, 9, (1 * 1000), false);
	}
	
	/* Exit action for state 'Running Watch Mode'. */
	private void exitAction_main_region_Running_Watch_Mode() {
		timer.unsetTimer(this, 0);
		
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Time Display Mode'. */
	private void exitAction_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode() {
		timer.unsetTimer(this, 2);
		
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Chrono Display Mode'. */
	private void exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Time Edit Mode'. */
	private void exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode() {
		timer.unsetTimer(this, 5);
		
		setEditTime(false);
	}
	
	/* Exit action for state 'main'. */
	private void exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main() {
		timer.unsetTimer(this, 6);
		
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'increaseSelection'. */
	private void exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'Pressing botRight Button'. */
	private void exitAction_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button() {
		timer.unsetTimer(this, 9);
	}
	
	/* 'default' enter sequence for state Running Watch Mode */
	private void enterSequence_main_region_Running_Watch_Mode_default() {
		entryAction_main_region_Running_Watch_Mode();
		enterSequence_main_region_Running_Watch_Mode_sub_region_default();
	}
	
	/* 'default' enter sequence for state Time Display Mode */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Time_Display_Mode;
	}
	
	/* 'default' enter sequence for state Chrono Display Mode */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
		enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_default();
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle;
	}
	
	/* 'default' enter sequence for state Paused */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused;
	}
	
	/* 'default' enter sequence for state Running */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running;
	}
	
	/* 'default' enter sequence for state Reset */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset;
	}
	
	/* 'default' enter sequence for state Time Edit Mode */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
		enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_default();
	}
	
	/* 'default' enter sequence for state main */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main;
	}
	
	/* 'default' enter sequence for state increaseSelection */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection;
	}
	
	/* 'default' enter sequence for state Pressing botRight Button */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button_default() {
		entryAction_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region sub region */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_default() {
		react_main_region_Running_Watch_Mode_sub_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Chrono Region */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_default() {
		react_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region__entry_Default();
	}
	
	/* 'default' enter sequence for region Time Edit Region */
	private void enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_default() {
		react_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region__entry_Default();
	}
	
	/* Default exit sequence for state Time Display Mode */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode();
	}
	
	/* Default exit sequence for state Chrono Display Mode */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode() {
		exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region();
		exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Paused */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Running */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Reset */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Time Edit Mode */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode() {
		exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region();
		exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
	}
	
	/* Default exit sequence for state main */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main();
	}
	
	/* Default exit sequence for state increaseSelection */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection();
	}
	
	/* Default exit sequence for state Pressing botRight Button */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Running_Watch_Mode_sub_region_Time_Display_Mode:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode();
			exitAction_main_region_Running_Watch_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			exitAction_main_region_Running_Watch_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			exitAction_main_region_Running_Watch_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			exitAction_main_region_Running_Watch_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			exitAction_main_region_Running_Watch_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main();
			exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
			exitAction_main_region_Running_Watch_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection();
			exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
			exitAction_main_region_Running_Watch_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button();
			exitAction_main_region_Running_Watch_Mode();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region sub region */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region() {
		switch (stateVector[0]) {
		case main_region_Running_Watch_Mode_sub_region_Time_Display_Mode:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset();
			exitAction_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main();
			exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection();
			exitAction_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
			break;
		case main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Chrono Region */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region() {
		switch (stateVector[0]) {
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running();
			break;
		case main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Time Edit Region */
	private void exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region() {
		switch (stateVector[0]) {
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main();
			break;
		case main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection:
			exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Running_Watch_Mode_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Running_Watch_Mode_sub_region__entry_Default() {
		enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region__entry_Default() {
		enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region__entry_Default() {
		enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Running_Watch_Mode_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[0]) {
				sCILogicUnit.operationCallback.increaseTimeByOne();
				
				sCIDisplay.operationCallback.refreshTimeDisplay();
			}
			if (sCIButtons.topRightPressed) {
				sCIDisplay.operationCallback.setIndiglo();
				
				setTopRightPressed(true);
			}
			if (sCIButtons.topRightReleased) {
				setTopRightPressed(false);
				
				setLightsOffCounter(2000);
			}
			if (((timeEvents[1]) && ((getLightsOffCounter()>0 && getTopRightPressed()==false)))) {
				setLightsOffCounter(getLightsOffCounter() - 1000);
			}
			if (getLightsOffCounter()==0) {
				sCIDisplay.operationCallback.unsetIndiglo();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_react(try_transition)==false) {
				if (sCIButtons.topLeftPressed) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_default();
				} else {
					if (sCIButtons.botRightPressed) {
						exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode();
						enterSequence_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			if (timeEvents[2]) {
				sCIDisplay.operationCallback.refreshTimeDisplay();
			}
			if (((timeEvents[3]) && (getRunChrono()))) {
				sCILogicUnit.operationCallback.increaseChronoByOne();
				
				sCIDisplay.operationCallback.refreshChronoDisplay();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_react(try_transition)==false) {
				if (sCIButtons.topLeftPressed) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (((timeEvents[4]) && (getRunChrono()))) {
				sCILogicUnit.operationCallback.increaseChronoByOne();
				
				sCIDisplay.operationCallback.refreshChronoDisplay();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_react(try_transition)==false) {
				if (sCIButtons.botRightPressed) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running_default();
				} else {
					if (getRunChrono()) {
						exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle();
						enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running_default();
					} else {
						if (sCIButtons.botLeftPressed) {
							exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle();
							enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_react(try_transition)==false) {
				if (sCIButtons.botRightPressed) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running_default();
				} else {
					if (sCIButtons.botLeftPressed) {
						exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused();
						enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_react(try_transition)==false) {
				if (sCIButtons.botRightPressed) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Paused_default();
				} else {
					if (sCIButtons.botLeftPressed) {
						exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Running();
						enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_react(try_transition)==false) {
				exitSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Reset();
				enterSequence_main_region_Running_Watch_Mode_sub_region_Chrono_Display_Mode_Chrono_Region_Idle_default();
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_react(try_transition)==false) {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (sCIButtons.botLeftReleased) {
				setEditTimeOver(5);
			}
			if (sCIButtons.botRightReleased) {
				setEditTimeOver(5);
			}
			if (((timeEvents[5]) && (getEditTimeOver()>0))) {
				setEditTimeOver(getEditTimeOver() - 1);
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_react(try_transition)==false) {
				if (sCIButtons.botLeftPressed) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection_default();
				} else {
					if (getEditTimeOver()==0) {
						exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
						enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			if (((timeEvents[6]) && (getFieldSelectedVisible()))) {
				sCIDisplay.operationCallback.hidePos(1);
				
				setFieldSelectedVisible(false);
			}
			if (((timeEvents[7]) && (!getFieldSelectedVisible()))) {
				setFieldSelectedVisible(true);
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_react(try_transition)==false) {
				if (sCIButtons.botLeftReleased) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_increaseSelection();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_Time_Edit_Region_main_default();
				} else {
					if (getEditTimeOver()==0) {
						exitSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode();
						enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			if (timeEvents[8]) {
				sCILogicUnit.operationCallback.increasePos(1);
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (main_region_Running_Watch_Mode_react(try_transition)==false) {
				if (timeEvents[9]) {
					exitSequence_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button();
					enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Edit_Mode_default();
				} else {
					if (sCIButtons.botRightReleased) {
						exitSequence_main_region_Running_Watch_Mode_sub_region_Pressing_botRight_Button();
						enterSequence_main_region_Running_Watch_Mode_sub_region_Time_Display_Mode_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
}
